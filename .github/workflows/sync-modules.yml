name: Sync modules.json from Issues

on:
  workflow_dispatch: {}
  schedule:
    - cron: "*/30 * * * *"   # cada 30 minutos

permissions:
  contents: write
  issues: read

concurrency:
  group: sync-modules-json
  cancel-in-progress: false

jobs:
  sync:
    runs-on: ubuntu-latest
    env:
      ORG: RON-DATADRIVEN
      PROJECT_NUMBER: "3"
      OUTPUT: docs/modules.json

    steps:
      - name: Checkout @ branch main
        uses: actions/checkout@v4
        with:
          ref: main              # evita detached HEAD
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22.x"
          cache: true
          cache-dependency-path: |
            go.sum
            **/go.sum

      - name: Sanity repo (HEAD/replace/vendor)
        run: |
          set -euo pipefail
          echo "HEAD:"; git log -1 --oneline
          echo "replace en go.mod:"
          grep -n 'replace github.com/shurcooL/githubv4 => ./third_party/githubv4' go.mod
          echo "¿existe third_party/githubv4/go.mod?"
          test -f third_party/githubv4/go.mod && echo "OK" || (echo "Falta vendor third_party/githubv4" && exit 1)
          echo "Comprobando replace con go list:"
          go list -m -json github.com/shurcooL/githubv4 | sed -n '1,120p'

      - name: Sanity GraphQL (Projects v2)
        env:
          GH_TOKEN: ${{ secrets.PROJECTS_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.PROJECTS_TOKEN }}
          ORG: ${{ env.ORG }}
          PROJ: ${{ env.PROJECT_NUMBER }}
        run: |
          set -euo pipefail
          echo "Viewer con este token:"
          gh api graphql -f query='{ viewer { login } }' --jq '.data.viewer.login'
          echo "Scopes del PAT:"
          gh api -i user | sed -n 's/^X-Oauth-Scopes: //p'
          echo "Header SSO (si aplica, debe decir 'authorized'):"
          gh api -i orgs/$ORG | sed -n '/^X-GitHub-SSO/p' || true
          echo "Projects v2 visibles en $ORG:"
          gh api graphql -f query='
          query($org:String!){
            organization(login:$org){
              projectsV2(first:50, orderBy:{field:TITLE, direction:ASC}){
                nodes { number title }
              }
            }
          }' -f org="$ORG" --jq '.data.organization.projectsV2.nodes'
          echo "Probar acceso directo a ProjectV2 #$PROJ"
          gh api graphql -f query='
          query($org:String!, $n:Int!){
            organization(login:$org){
              projectV2(number:$n){ id title }
            }
          }' -f org="$ORG" -F n="$PROJ" >/dev/null

      - name: Build sync tool
        run: |
          set -euo pipefail
          go mod tidy || true
          go build -o sync-modules ./cmd/sync-modules

      - name: Run sync
        env:
          GH_TOKEN: ${{ secrets.PROJECTS_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.PROJECTS_TOKEN }}
          ORG: ${{ env.ORG }}
          PROJECT_NUMBER: ${{ env.PROJECT_NUMBER }}
          OUTPUT: ${{ env.OUTPUT }}
        run: |
          set -euo pipefail
          ./sync-modules

      - name: Commit & push if changed
        env:
          OUTPUT: ${{ env.OUTPUT }}
          REF_TYPE: ${{ github.ref_type }}   # "branch" o "tag"
          REF_NAME: ${{ github.ref_name }}   # p.ej. "main"
        run: |
          set -euo pipefail

          if ! git diff --quiet -- "$OUTPUT"; then
            git config user.name  "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

            git add "$OUTPUT"
            git commit -m "ci(sync): update modules.json [skip ci]"

            # Si el run vino de una rama, empuja a esa rama; si fue tag, usa la rama por defecto del remoto.
            BRANCH="$REF_NAME"
            if [ "${REF_TYPE}" != "branch" ] || [ -z "$BRANCH" ]; then
              BRANCH="$(git remote show origin | sed -n 's/  HEAD branch: //p')"
            fi

            # (Opcional) Rebasar por si la rama avanzó mientras corría el job
            git fetch origin "$BRANCH"
            git rebase "origin/$BRANCH"

            git push origin HEAD:"$BRANCH"
          else
            echo "No changes to commit."
          fi
