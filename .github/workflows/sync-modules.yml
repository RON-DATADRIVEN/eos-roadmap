name: Sync modules.json from Issues

on:
  workflow_dispatch: {}
  schedule:
    - cron: "*/30 * * * *"   # cada 30 minutos

permissions:
  contents: write             # para commit/push de docs/modules.json
  issues: read                # leer issues (si lo usas en el futuro)
  # OJO: repository-projects: read solo aplica a Projects "classic" del repo.
  # Para Projects v2 de la org, usamos un PAT (PROJECTS_TOKEN).

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22.x"
          cache: true
          cache-dependency-path: |
            go.sum
            **/go.sum

      # Sanity: usa el PAT con read:project/read:org (secret PROJECTS_TOKEN)
      - name: Sanity GraphQL (Projects v2)
        env:
          GH_TOKEN: ${{ secrets.PROJECTS_TOKEN }}   # <-- CAMBIO CLAVE
          ORG: RON-DATADRIVEN
          PROJ: "3"
        run: |
          set -euo pipefail
          gh api graphql -f query='
          query($org:String!, $n:Int!){
            organization(login:$org){
              projectV2(number:$n){ id title }
            }
          }' -f org="$ORG" -F n="$PROJ" >/dev/null

      - name: Build sync tool
        run: |
          set -euo pipefail
          go mod tidy || true
          go build -o sync-modules ./cmd/sync-modules

      # Ejecuta el binario con el MISMO PAT pero en la var que espera el código: GITHUB_TOKEN
      - name: Run sync
        env:
          GITHUB_TOKEN: ${{ secrets.PROJECTS_TOKEN }}  # <-- CAMBIO CLAVE (binario usa GITHUB_TOKEN)
          ORG: RON-DATADRIVEN
          PROJECT_NUMBER: "3"
          OUTPUT: docs/modules.json
        run: |
          set -euo pipefail
          ./sync-modules

      # Commit directo (si main no es protegida). Si lo es, cambia por PR step.
      - name: Commit & push if changed
        run: |
          set -euo pipefail
          if ! git diff --quiet -- docs/modules.json; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add docs/modules.json
            git commit -m "ci(sync): update modules.json [skip ci]"
            git push
          else
            echo "No changes to commit."
          fi

      # Alternativa si main es protegida:
      # - name: Create Pull Request
      #   if: success()
      #   uses: peter-evans/create-pull-request@v6
      #   with:
      #     add-paths: docs/modules.json         # <-- limita el PR a ese archivo
      #     branch: chore/sync-modules-json
      #     title: 'ci(sync): update modules.json'
      #     commit-message: 'ci(sync): update modules.json'
      #     body: 'Actualización automática desde Project EOS 2.0'
