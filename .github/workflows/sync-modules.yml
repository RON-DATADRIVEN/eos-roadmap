name: Sync modules.json from Issues

on:
  workflow_dispatch: {}
  schedule:
    - cron: "*/30 * * * *"   # cada 30 minutos

# Permisos del GITHUB_TOKEN del job (el acceso a Projects v2 lo da PROJECTS_TOKEN)
permissions:
  contents: write             # commit/push o PR
  issues: read                # opcional, por si luego consultas issues

# Evita solapes si se encola otra ejecución
concurrency:
  group: sync-modules-json
  cancel-in-progress: false

jobs:
  sync:
    runs-on: ubuntu-latest
    env:
      ORG: RON-DATADRIVEN
      PROJECT_NUMBER: "3"
      OUTPUT: docs/modules.json

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22.x"
          cache: true
          cache-dependency-path: |
            go.sum
            **/go.sum

      # Sanity: fuerza a gh a usar TU PAT (PROJECTS_TOKEN) y muestra viewer/scopes/SSO/projects
      - name: Sanity GraphQL (Projects v2)
        env:
          GH_TOKEN: ${{ secrets.PROJECTS_TOKEN }}       # PAT con scopes: project (read) y read:org
          GITHUB_TOKEN: ${{ secrets.PROJECTS_TOKEN }}   # por si alguna lib lee GITHUB_TOKEN
          ORG: ${{ env.ORG }}
          PROJ: ${{ env.PROJECT_NUMBER }}
        run: |
          set -euo pipefail
          echo "Viewer con este token:"
          gh api graphql -f query='{ viewer { login } }' --jq '.data.viewer.login'

          echo "Scopes del PAT:"
          gh api -i user | sed -n 's/^X-Oauth-Scopes: //p'

          echo "Header SSO (si aplica, debe decir 'authorized'):"
          gh api -i orgs/$ORG | sed -n '/^X-GitHub-SSO/p' || true

          echo "Projects v2 visibles en $ORG:"
          gh api graphql -f query='
          query($org:String!){
            organization(login:$org){
              projectsV2(first:50, orderBy:{field:TITLE, direction:ASC}){
                nodes { number title }
              }
            }
          }' -f org="$ORG" --jq '.data.organization.projectsV2.nodes'

          echo "Probar acceso directo a ProjectV2 #$PROJ"
          gh api graphql -f query='
          query($org:String!, $n:Int!){
            organization(login:$org){
              projectV2(number:$n){ id title }
            }
          }' -f org="$ORG" -F n="$PROJ" >/dev/null

      - name: Build sync tool
        run: |
          set -euo pipefail
          go mod tidy || true
          go build -o sync-modules ./cmd/sync-modules

      # Ejecuta el binario usando el MISMO PAT en GITHUB_TOKEN
      - name: Run sync
        env:
          GH_TOKEN: ${{ secrets.PROJECTS_TOKEN }}        # por si algo invoca gh
          GITHUB_TOKEN: ${{ secrets.PROJECTS_TOKEN }}    # el binario usa esta var
          ORG: ${{ env.ORG }}
          PROJECT_NUMBER: ${{ env.PROJECT_NUMBER }}
          OUTPUT: ${{ env.OUTPUT }}
        run: |
          set -euo pipefail
          ./sync-modules

      # Commit directo (si la rama destino no es protegida). Si es protegida, usa el bloque de PR.
      - name: Commit & push if changed
        run: |
          set -euo pipefail
          if ! git diff --quiet -- ${{ env.OUTPUT }}; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add ${{ env.OUTPUT }}
            git commit -m "ci(sync): update modules.json [skip ci]"
            git push
          else
            echo "No changes to commit."
          fi

      # --- Alternativa: crear PR si la rama es protegida (descomenta y comenta el bloque anterior)
      # - name: Create Pull Request
      #   if: success()
      #   uses: peter-evans/create-pull-request@v6
      #   with:
      #     add-paths: ${{ env.OUTPUT }}              # limita el PR al JSON
      #     branch: chore/sync-modules-json
      #     title: "ci(sync): update modules.json"
      #     commit-message: "ci(sync): update modules.json"
      #     body: "Actualización automática desde Project EOS 2.0"
