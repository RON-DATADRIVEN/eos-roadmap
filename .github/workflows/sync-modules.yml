name: Sync modules.json from Issues

on:
  workflow_dispatch: {}
  schedule:
    - cron: "*/30 * * * *"     # cada 30 min
  # Opcional: ejecuta en pushes solo si tocas estas rutas
  push:
    paths:
      - ".github/workflows/sync-modules.yml"
      - "cmd/sync-modules/**"

permissions:
  contents: write              # commit/crear PR
  pull-requests: write         # crear/actualizar PR
  issues: read                 # leer issues
  repository-projects: read    # Projects v2 (org)

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22.x"
          cache: true
          cache-dependency-path: |
            go.sum
            **/go.sum

      # Sanity: valida que el token puede leer Projects v2
      - name: Sanity GraphQL (Projects v2)
        env:
          GH_TOKEN: ${{ secrets.PROJECTS_TOKEN }}   # <= usa tu PAT
        run: |
          set -euo pipefail
          gh api graphql -f query='
          query($org:String!, $n:Int!){
            organization(login:$org){
              projectV2(number:$n){
                items(first:1){
                  nodes{
                    area: fieldValueByName(name:"Area"){
                      __typename
                      ... on ProjectV2ItemFieldSingleSelectValue { name }
                    }
                  }
                }
              }
            }
          }' -f org=RON-DATADRIVEN -F n=3 >/dev/null

      - name: Build sync tool
        run: |
          set -euo pipefail
          go mod tidy || true
          go build -o sync-modules ./cmd/sync-modules

      - name: Run sync
        env:
          GITHUB_TOKEN: ${{ secrets.PROJECTS_TOKEN }}  # <= usa tu PAT en el binario
          ORG: RON-DATADRIVEN
          PROJECT_NUMBER: "3"
          OUTPUT: docs/modules.json
        run: |
          set -euo pipefail
          ./sync-modules

      # Opción 1: si main NO es protegida (push directo)
      # - name: Commit & push if changed
      #   run: |
      #     set -euo pipefail
      #     if ! git diff --quiet -- docs/modules.json; then
      #       git config user.name "github-actions[bot]"
      #       git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
      #       git add docs/modules.json
      #       git commit -m "chore(roadmap): sync modules.json from Issues [skip ci]"
      #       git push
      #     else
      #       echo "No changes to commit."
      #     fi

      # Opción 2 (recomendada): main protegida → PR solo con el PATH deseado
      - name: Create Pull Request (docs/modules.json only)
        if: success()
        uses: peter-evans/create-pull-request@v6
        with:
          branch: chore/sync-modules-json
          title: "ci(sync): update modules.json"
          commit-message: "ci(sync): update modules.json"
          body: "Actualización automática desde Project EOS 2.0"
          add-paths: |                 # <= AQUÍ usas *el Path* a incluir en el PR
            docs/modules.json
          labels: |
            automation
            roadmap

